<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="n^/xL*LM3U_cX/%@!o|E">TimeTravelPlayer</variable></variables><block type="pxt-on-start" id="vpPlX@Vm(U4O9kF;ZRX8" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="ac%HWthAaa[kI[%smSb4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum ActionList{" line1="    UP, DOWN, LEFT, RIGHT, DESTROY" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="-3{Bp$eV5z(#FtEVE~vb" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface ActionTimestamp {" line1="    timestamp :number" line2="    action : ActionList" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="1W@#3d8*x4w%@nYn2?dW" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class StoredPlayerActivity {" line1="    activities:ActionTimestamp[]" line2="    public constructor() {" line3="        this.activities = []" line4="    }" line5="    push(action:ActionList, timestamp:number) {" line6="        this.activities.push({" line7="            timestamp : timestamp, " line8="            action : action" line9="        })" line10="    }" line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="1,l,8]Sc|^f1,}{/zl#h" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class TimeTravelPlayer {" line1="    private playerSprite :Sprite" line2="    activities:ActionTimestamp[]" line3="    private destroyed : boolean" line4="    public constructor(storedPlayerActivity : StoredPlayerActivity) {" line5="        this.playerSprite = sprites.create(assets.image`OtherTimelineSpaceship`, SpriteKind.TimeTravelPlayer)" line6="        this.playerSprite.setFlag(SpriteFlag.StayInScreen, true)" line7="        this.playerSprite.x = 32" line8="        this.activities = storedPlayerActivity.activities" line9="    }" line10="    " line11="    public say(text:string) {" line12="        this.playerSprite.say(text)" line13="    }" line14="" line15="    public up() {" line16="        this.playerSprite.vx = 0" line17="        this.playerSprite.vy = -50" line18="    }" line19="    public down() {" line20="        this.playerSprite.vx = 0" line21="        this.playerSprite.vy = 50" line22="    }" line23="    public left() {" line24="        this.playerSprite.vx = -50" line25="        this.playerSprite.vy = 0" line26="    }" line27="    public right() {" line28="        this.playerSprite.vx = 50" line29="        this.playerSprite.vy = 0" line30="    }" line31="" line32="    public destroy() {" line33="        this.playerSprite.say(&quot;Escaping to another timeline, good luck&quot;, 2000)" line34="        this.playerSprite.destroy(effects.spray, 2000)" line35="        this.playerSprite.vx = 0" line36="        this.playerSprite.vy = 0" line37="        this.destroyed = true" line38="    }" line39="" line40="    public fire() {" line41="        if (!this.destroyed) {" line42="            sprites.createProjectileFromSprite(assets.image`PlayerProjectiles`, this.playerSprite, 100, 0)" line43="        }" line44="        " line45="    }" line46="}" numlines="47"></mutation><next><block type="typescript_statement" id="pgI1g4h]Uc$;Kipsm#[^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace engine {" line1="" line2="    let currentTimelineTimeStamp:number = 0;" line3="" line4="    let storedPlayerActivities : StoredPlayerActivity[] = []" line5="    let playersInOtherTimeline : TimeTravelPlayer[]" line6="    let currentPlayerActivityLogger : StoredPlayerActivity = null" line7="    let playerSprite :Sprite = null" line8="" line9="    let init = false" line10="    let destoryedUniverse = 0" line11="" line12="    function endGame() {" line13="        destoryedUniverse++" line14="        game.showLongText(&quot;Heavy damage taken&quot;, DialogLayout.Bottom)" line15="        game.showLongText(&quot;Opening wormhole to another timeline&quot;, DialogLayout.Bottom)" line16="        game.showLongText(destoryedUniverse + &quot; universe(s) destroyed&quot;, DialogLayout.Bottom)" line17="" line18="        currentPlayerActivityLogger.push(ActionList.DESTROY, game.runtime() - currentTimelineTimeStamp)" line19="        storedPlayerActivities.push(currentPlayerActivityLogger)" line20="" line21="        cubicbird.destroyAllSpriteOfKind(SpriteKind.Player)" line22="        cubicbird.destroyAllSpriteOfKind(SpriteKind.Shark)" line23="        cubicbird.destroyAllSpriteOfKind(SpriteKind.Projectile)" line24="        cubicbird.destroyAllSpriteOfKind(SpriteKind.EnemyProjectile)" line25="        cubicbird.destroyAllSpriteOfKind(SpriteKind.TimeTravelPlayer)" line26="        " line27="        restartGame()" line28="    }" line29="" line30="    function overlapHandle() {" line31="        sprites.onOverlap(SpriteKind.Player, SpriteKind.EnemyProjectile, function(sprite: Sprite, otherSprite: Sprite) {" line32="            endGame()" line33="        })" line34="        sprites.onOverlap(SpriteKind.Player, SpriteKind.Shark, function(sprite: Sprite, otherSprite: Sprite) {" line35="            endGame()" line36="        })" line37="" line38="        sprites.onOverlap(SpriteKind.Projectile, SpriteKind.Shark, function(sprite: Sprite, otherSprite: Sprite) {" line39="            info.changeScoreBy(1)" line40="            otherSprite.startEffect(effects.spray, 200)" line41="            sprite.destroy()" line42="            if(shark.takeDamage(1)){" line43="                game.showLongText(&quot;You've save us all, at &quot; + destoryedUniverse + &quot; universe(s)'s cost&quot;, DialogLayout.Bottom)" line44="                game.over(true)" line45="            }" line46="        })" line47="    }" line48="" line49="    function bindControl() {" line50="        controller.up.onEvent(ControllerButtonEvent.Pressed, function() {" line51="            currentPlayerActivityLogger.push(ActionList.UP, game.runtime() - currentTimelineTimeStamp)" line52="            playerSprite.vy = -50" line53="            playerSprite.vx = 0" line54="        })" line55="        controller.down.onEvent(ControllerButtonEvent.Pressed, function() {" line56="            currentPlayerActivityLogger.push(ActionList.DOWN, game.runtime() - currentTimelineTimeStamp)" line57="            playerSprite.vy = 50" line58="            playerSprite.vx = 0" line59="        })" line60="        controller.left.onEvent(ControllerButtonEvent.Pressed, function() {" line61="            currentPlayerActivityLogger.push(ActionList.LEFT, game.runtime() - currentTimelineTimeStamp)" line62="            playerSprite.vy = 0" line63="            playerSprite.vx = -50" line64="        })" line65="        controller.right.onEvent(ControllerButtonEvent.Pressed, function() {" line66="            currentPlayerActivityLogger.push(ActionList.RIGHT, game.runtime() - currentTimelineTimeStamp)" line67="            playerSprite.vy = 0" line68="            playerSprite.vx = 50" line69="        })" line70="    }" line71="" line72="    function dumpActivities(activities:ActionTimestamp[]) {" line73="        let log = &quot;&quot;" line74="        for (let activity of activities) {" line75="            log += activity.timestamp + &quot;:&quot; + activity.action + &quot;;&quot;" line76="        }" line77="        console.log(log)" line78="    }" line79="" line80="    function summonPlayersInOtherTimeline() {" line81="        playersInOtherTimeline = []" line82="        for (let storedPlayerActivity of storedPlayerActivities) {" line83="            playersInOtherTimeline.push(new TimeTravelPlayer(storedPlayerActivity))" line84="        }" line85="    }" line86="" line87="    class MoveHandler {" line88="        private currentActionIndice:number[]" line89="        private currentTimelineTimeStamp:number" line90="        static INSTANCE = new MoveHandler()" line91="" line92="        reset(currentTimelineTimeStamp: number, length:number) {" line93="            this.currentActionIndice = []" line94="            this.currentTimelineTimeStamp = currentTimelineTimeStamp" line95="            for (let i = 0 ; i &lt; length; i++) {" line96="                this.currentActionIndice.push(0)" line97="            }" line98="        }" line99="" line100="        serve() {" line101="" line102="            game.onUpdateInterval(1000, () =&gt;  {" line103="                let delta = game.runtime() - this.currentTimelineTimeStamp" line104="                for (let j = 0 ; j &lt; playersInOtherTimeline.length; j++) {" line105="                    let anotherPlayer = playersInOtherTimeline[j]" line106="                    anotherPlayer.say(&quot;&quot; + Math.floor((anotherPlayer.activities[anotherPlayer.activities.length-1].timestamp - delta)/1000) )" line107="                    while (this.currentActionIndice[j] &lt; anotherPlayer.activities.length " line108="                        &amp;&amp; anotherPlayer.activities[this.currentActionIndice[j]].timestamp &lt; delta) {" line109="                        let action = anotherPlayer.activities[this.currentActionIndice[j]].action" line110="                        switch(action) {" line111="                            case ActionList.UP: " line112="                                anotherPlayer.up() " line113="                                break;" line114="                            case ActionList.DOWN: " line115="                                anotherPlayer.down() " line116="                                break;" line117="                            case ActionList.LEFT: " line118="                                anotherPlayer.left() " line119="                                break;" line120="                            case ActionList.RIGHT: " line121="                                anotherPlayer.right() " line122="                                break;" line123="                            case ActionList.DESTROY: " line124="                                anotherPlayer.destroy() " line125="                                break;" line126="                        }" line127="                        this.currentActionIndice[j] = this.currentActionIndice[j] + 1" line128="                    }" line129="                }" line130="            })" line131="            " line132="            game.onUpdate(() =&gt;  {" line133="                let delta2 = game.runtime() - this.currentTimelineTimeStamp" line134="                for (let k = 0 ; k &lt; playersInOtherTimeline.length; k++) {" line135="                    let anotherPlayer2 = playersInOtherTimeline[k]" line136="                    while (this.currentActionIndice[k] &lt; anotherPlayer2.activities.length " line137="                        &amp;&amp; anotherPlayer2.activities[this.currentActionIndice[k]].timestamp &lt; delta2) {" line138="                        let action2 = anotherPlayer2.activities[this.currentActionIndice[k]].action" line139="                        switch(action2) {" line140="                            case ActionList.UP: " line141="                                anotherPlayer2.up() " line142="                                break;" line143="                            case ActionList.DOWN: " line144="                                anotherPlayer2.down() " line145="                                break;" line146="                            case ActionList.LEFT: " line147="                                anotherPlayer2.left() " line148="                                break;" line149="                            case ActionList.RIGHT: " line150="                                anotherPlayer2.right() " line151="                                break;" line152="                            case ActionList.DESTROY: " line153="                                anotherPlayer2.destroy() " line154="                                break;" line155="                        }" line156="                        this.currentActionIndice[k] = this.currentActionIndice[k] + 1" line157="                    }" line158="                }" line159="            })" line160="        }" line161="    }" line162="" line163="    function moveHandler(initHandler:boolean) {" line164="        MoveHandler.INSTANCE.reset(currentTimelineTimeStamp, playersInOtherTimeline.length)" line165="        if (initHandler) {" line166="            MoveHandler.INSTANCE.serve()" line167="        }" line168="    }" line169="    " line170="    function attackHandler() {" line171="        game.onUpdateInterval(500, function() {" line172="                for (let anotherPlayer22 of playersInOtherTimeline) {" line173="                    anotherPlayer22.fire()" line174="                }" line175="                sprites.createProjectileFromSprite(assets.image`PlayerProjectiles`, playerSprite, 100, 0)" line176="            })" line177="    }" line178="" line179="    export function restartGame() {" line180="        currentPlayerActivityLogger = new StoredPlayerActivity()" line181="        currentTimelineTimeStamp = game.runtime()" line182="        playerSprite = sprites.create(assets.image`CurrentTimelineSpaceship`, SpriteKind.Player)" line183="        playerSprite.x = 32" line184="        playerSprite.z = 100" line185="        playerSprite.setFlag(SpriteFlag.StayInScreen, true)" line186="        bindControl()" line187="        summonPlayersInOtherTimeline()" line188="" line189="        moveHandler(!init)        " line190="        shark.spawnBoss(playerSprite, !init)" line191="        hud.resetTime()" line192="" line193="        if (!init) {" line194="            overlapHandle()" line195="            attackHandler()" line196="" line197="            init = true" line198="        }" line199="        " line200="    }" line201="}" numlines="202"></mutation><next><block type="palettesetmonochrome" id="2}|SCzxmJpAY+^?S+2(;"><next><block type="typescript_statement" id="Q:dXvOv.R4$g[=#_N6A2" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="engine.restartGame()" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>